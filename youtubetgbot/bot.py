import logging
import asyncio
import os
import requests
import socks
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from youtubesearchpython import VideosSearch
import yt_dlp
import traceback
import glob
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)
logging.getLogger('httpx').setLevel(logging.WARNING)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MAX_FILE_SIZE_MB = 50
MAX_VIDEO_DURATION = 600  # 10 –º–∏–Ω—É—Ç
SEARCH_RESULTS_LIMIT = 5

class ProxyManager:
    def __init__(self):
        self.socks_ports = [9150, 9050]  # –ü–æ—Ä—Ç—ã Tor Browser –∏ Tor Service
        self.current_port = None
        self.last_check = {}
        self.check_interval = timedelta(minutes=1)
    
    def need_check(self, proxy_url: str) -> bool:
        if proxy_url not in self.last_check:
            return True
        return datetime.now() - self.last_check[proxy_url] > self.check_interval
    
    async def check_proxy(self, proxy_url: str) -> bool:
        if not self.need_check(proxy_url):
            return True
            
        try:
            async with asyncio.timeout(10):
                session = requests.Session()
                session.proxies = {
                    'http': proxy_url,
                    'https': proxy_url
                }
                response = await asyncio.get_event_loop().run_in_executor(
                    None,
                    lambda: session.get('https://www.youtube.com', timeout=10)
                )
                if response.status_code == 200:
                    self.last_check[proxy_url] = datetime.now()
                    logger.info(f"–ü—Ä–æ–∫—Å–∏ {proxy_url} —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    return True
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∫—Å–∏ {proxy_url}: {str(e)}")
        return False
    
    async def get_working_proxy(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–±–æ—á–∏–π SOCKS5 –ø—Ä–æ–∫—Å–∏"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Ä—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if self.current_port:
            proxy_url = f"socks5h://127.0.0.1:{self.current_port}"
            if await self.check_proxy(proxy_url):
                return proxy_url
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–æ—Ä—Ç—ã
        for port in self.socks_ports:
            proxy_url = f"socks5h://127.0.0.1:{port}"
            if await self.check_proxy(proxy_url):
                self.current_port = port
                return proxy_url
        
        return None

# –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–∫—Å–∏
proxy_manager = ProxyManager()

# –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è yt-dlp
YDL_OPTIONS = {
    'format': 'best',
    'nocheckcertificate': True,
    'no_warnings': True,
    'ignoreerrors': True,
    'quiet': True,
    'extract_flat': True,
    'socket_timeout': 30,
    'retries': 3,
    'http_headers': {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
    },
    'prefer_insecure': True,
    'force_ipv4': True,
    'rm_cachedir': True
}

def get_download_options(base_opts: dict, format_id: str = None) -> dict:
    """–°–æ–∑–¥–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ"""
    opts = base_opts.copy()
    opts.update({
        'format': format_id if format_id else 'best',
        'outtmpl': 'downloads/%(title)s.%(ext)s',
        'merge_output_format': 'mp4',
        'retries': 5,
        'fragment_retries': 5,
        'continuedl': True
    })
    return opts

async def search_videos(query: str) -> list:
    """–ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ –Ω–∞ YouTube"""
    try:
        videos_search = VideosSearch(query, limit=SEARCH_RESULTS_LIMIT)
        results = videos_search.result()['result']
        
        formatted_results = []
        for video in results:
            formatted_results.append({
                'title': video['title'],
                'url': video['link'],
                'duration': video['duration'],
                'channel': video['channel']['name'],
                'views': video.get('viewCount', {}).get('short', 'N/A'),
                'thumbnail': video['thumbnails'][0]['url']
            })
        
        return formatted_results
    except Exception as e:
        logger.error(f"Error searching videos: {str(e)}")
        return []

def cleanup_temp_files(pattern: str = "downloads/*"):
    """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
    try:
        if not os.path.exists('downloads'):
            os.makedirs('downloads')
            return
            
        for file in glob.glob(pattern):
            try:
                if os.path.isfile(file):
                    os.remove(file)
                    logger.info(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {file}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file}: {str(e)}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ", callback_data='search')],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help')],
        [InlineKeyboardButton("‚≠êÔ∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data='favorites')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ.\n\n"
        "üé• –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ, –∏ —è –Ω–∞–π–¥—É –µ–≥–æ –¥–ª—è —Ç–µ–±—è!\n"
        "üìå –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text
    status_message = await update.message.reply_text(
        f"üîç –ò—â—É –≤–∏–¥–µ–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}\n\n"
        "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
    )
    
    try:
        videos = await search_videos(query)
        
        if not videos:
            await status_message.edit_text("üòï –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        for video in videos:
            keyboard = [
                [
                    InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å", callback_data=f"format_{video['url']}"),
                    InlineKeyboardButton("‚≠êÔ∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"fav_{video['url']}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            caption = (
                f"üìπ *{video['title']}*\n\n"
                f"üë§ –ö–∞–Ω–∞–ª: {video['channel']}\n"
                f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {video['duration']}\n"
                f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {video['views']}\n\n"
                f"üîó [–°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ YouTube]({video['url']})"
            )
            
            await update.message.reply_photo(
                photo=video['thumbnail'],
                caption=caption,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        
        await status_message.delete()
    
    except Exception as e:
        logging.error(f"Error searching videos: {e}")
        await status_message.edit_text(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–∏–¥–µ–æ.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å."
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == 'search':
        await query.message.reply_text(
            "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–∏—Å–∫–∞:"
        )
    elif query.data == 'help':
        await query.message.reply_text(
            "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
            "1. –î–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ\n"
            "2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n"
            "3. –ù–∞–∂–º–∏—Ç–µ '–°–∫–∞—á–∞—Ç—å' –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ\n"
            "4. –î–æ–±–∞–≤–ª—è–π—Ç–µ –≤–∏–¥–µ–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ\n\n"
            "‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:\n"
            "- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ: 10 –º–∏–Ω—É—Ç\n"
            "- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 50MB\n\n"
            "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @your_username"
        )
    elif query.data == 'favorites':
        await query.message.reply_text(
            "‚≠êÔ∏è –í–∞—à —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ –ø—É—Å—Ç\n\n"
            "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ ‚≠êÔ∏è —Ä—è–¥–æ–º —Å –≤–∏–¥–µ–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞"
        )
    elif query.data.startswith('format_'):
        url = query.data.replace('format_', '')
        try:
            formats = await get_video_formats(url)
            if not formats:
                await query.message.reply_text(
                    "üòî –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.\n"
                    "–í–∏–¥–µ–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º."
                )
                return
            
            keyboard = []
            for fmt in formats:
                btn_text = f"üé• {fmt['quality']} ({fmt['size']}MB)"
                keyboard.append([InlineKeyboardButton(
                    btn_text,
                    callback_data=f"download_{url}_{fmt['format_id']}"
                )])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text(
                "üì• –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ:",
                reply_markup=reply_markup
            )
        except Exception as e:
            await query.message.reply_text(
                "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤–∏–¥–µ–æ.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    elif query.data.startswith('download_'):
        _, url, format_id = query.data.split('_', 2)
        status_message = await query.message.reply_text(
            "‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ...\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
        )
        
        try:
            video_path = await download_video(url, format_id)
            
            with open(video_path, 'rb') as video_file:
                await query.message.reply_video(
                    video=video_file,
                    caption="‚úÖ –í–æ—Ç –≤–∞—à–µ –≤–∏–¥–µ–æ!"
                )
            
            os.remove(video_path)
            await status_message.delete()
            
        except Exception as e:
            error_message = str(e)
            if "too long" in error_message.lower():
                await status_message.edit_text(
                    "‚ö†Ô∏è –≠—Ç–æ –≤–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ.\n"
                    "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 10 –º–∏–Ω—É—Ç."
                )
            elif "filesize" in error_message.lower():
                await status_message.edit_text(
                    "‚ö†Ô∏è –≠—Ç–æ –≤–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ.\n"
                    "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50MB."
                )
            else:
                await status_message.edit_text(
                    "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ."
                )
            logging.error(f"Download error: {e}")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
        "1. –î–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ\n"
        "2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n"
        "3. –ù–∞–∂–º–∏—Ç–µ '–°–∫–∞—á–∞—Ç—å' –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ\n"
        "4. –î–æ–±–∞–≤–ª—è–π—Ç–µ –≤–∏–¥–µ–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ\n\n"
        "‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:\n"
        "- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ: 10 –º–∏–Ω—É—Ç\n"
        "- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 50MB\n\n"
        "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @your_username"
    )

async def get_video_formats(url: str) -> list:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤–∏–¥–µ–æ"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è URL: {url}")
    
    ydl_opts = YDL_OPTIONS.copy()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–±–æ—á–∏–π –ø—Ä–æ–∫—Å–∏
        proxy = await proxy_manager.get_working_proxy()
        if proxy:
            ydl_opts['proxy'] = proxy
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏: {proxy}")
        
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            logger.info("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ...")
            info = ydl.extract_info(url, download=False)
            
            if not info:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ")
            
            formats = []
            available_formats = info.get('formats', [])
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(available_formats)} —Ñ–æ—Ä–º–∞—Ç–æ–≤")
            
            for f in available_formats:
                try:
                    has_video = f.get('vcodec', 'none') != 'none'
                    has_audio = f.get('acodec', 'none') != 'none'
                    
                    if has_video and has_audio:
                        format_id = f['format_id']
                        ext = f.get('ext', 'mp4')
                        resolution = f.get('height', 0)
                        quality = f.get('quality_label', f'{resolution}p' if resolution else 'N/A')
                        filesize = f.get('filesize', 0) or f.get('filesize_approx', 0)
                        size_mb = round(filesize / (1024 * 1024), 1) if filesize else 0
                        
                        if size_mb <= MAX_FILE_SIZE_MB:
                            formats.append({
                                'format_id': format_id,
                                'quality': quality,
                                'size': size_mb,
                                'ext': ext
                            })
                            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —Ñ–æ—Ä–º–∞—Ç: {format_id} ({quality}, {size_mb}MB)")
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞: {str(e)}")
                    continue
            
            if formats:
                formats.sort(key=lambda x: int(x['quality'].replace('p', '')) if x['quality'].endswith('p') else 0, reverse=True)
                return formats
            
            return [{'format_id': 'best', 'quality': '720p', 'size': 0, 'ext': 'mp4'}]
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤: {str(e)}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        return [{'format_id': 'best', 'quality': '720p', 'size': 0, 'ext': 'mp4'}]

async def download_video(url: str, format_id: str = None) -> str:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"""
    logger.info(f"–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: {url}, —Ñ–æ—Ä–º–∞—Ç: {format_id}")
    
    ydl_opts = get_download_options(YDL_OPTIONS, format_id)
    max_attempts = 3
    attempt = 0
    last_error = None
    
    while attempt < max_attempts:
        try:
            cleanup_temp_files()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–±–æ—á–∏–π –ø—Ä–æ–∫—Å–∏
            proxy = await proxy_manager.get_working_proxy()
            if not proxy:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–±–æ—á–∏–π –ø—Ä–æ–∫—Å–∏")
            
            ydl_opts['proxy'] = proxy
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} —Å –ø—Ä–æ–∫—Å–∏: {proxy}")
            
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
                info = ydl.extract_info(url, download=False)
                if not info:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                duration = info.get('duration', 0)
                if duration > MAX_VIDEO_DURATION:
                    raise Exception(f"–í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ ({duration} —Å–µ–∫)")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                filesize = info.get('filesize', 0) or info.get('filesize_approx', 0)
                if filesize > MAX_FILE_SIZE_MB * 1024 * 1024:
                    raise Exception(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({filesize/(1024*1024):.1f}MB)")
                
                # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
                logger.info("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ...")
                info = ydl.extract_info(url, download=True)
                filename = ydl.prepare_filename(info)
                
                if not os.path.exists(filename):
                    raise Exception("–§–∞–π–ª –Ω–µ –±—ã–ª —Å–∫–∞—á–∞–Ω")
                
                actual_size = os.path.getsize(filename)
                logger.info(f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: {filename} ({actual_size/(1024*1024):.1f}MB)")
                return filename
                
        except Exception as e:
            last_error = str(e)
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {str(e)}")
            attempt += 1
            
            if attempt >= max_attempts:
                cleanup_temp_files()
                logger.error(f"–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_error}")
                logger.error(f"Traceback: {traceback.format_exc()}")
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫")
            
            # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
            await asyncio.sleep(2 * attempt)
    
    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ")

def main():
    # –°–æ–∑–¥–∞—ë–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    TOKEN = "7905669787:AAEa2iCwYVIeEJBwNiPZes7L1ZvZsL-lykc"
    
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(button_click))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 